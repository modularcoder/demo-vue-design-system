import vue from 'rollup-plugin-vue'
import babel from '@rollup/plugin-babel'
import { terser } from 'rollup-plugin-terser'
import typescript from 'rollup-plugin-typescript2'
import peerDepsExternal from 'rollup-plugin-peer-deps-external'
import nodeResolve from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'
import postcss from 'rollup-plugin-postcss'

import fs from 'fs'
import path from 'path'
import packageJson from './package.json'
const bannerTxt = `/*! @pexeso/ui-core v${packageJson.version} */`

// const baseFolder = './src/components/'

// const components = fs
//   .readdirSync(baseFolder)
//   .filter((f) => fs.statSync(path.join(baseFolder, f)).isDirectory())

// const entries = {
//   index: './src/index.ts',
//   // helpers: './src/utils/helpers.ts',
//   // config: './src/utils/config.ts',
//   ...components.reduce((obj, name) => {
//     obj[name] = baseFolder + name
//     return obj
//   }, {}),
// }

const babelOptions = {
  babelHelpers: 'bundled',
}

const vuePluginConfig = {
  template: {
    isProduction: true,
    compilerOptions: {
      whitespace: 'condense',
    },
  },
}

const tsconfigDefaults = { compilerOptions: { declaration: false } }
const tsconfigOverride = {
  compilerOptions: { declaration: true, declarationDir: 'dist/types' },
}

const capitalize = (s) => {
  if (typeof s !== 'string') return ''
  return s.charAt(0).toUpperCase() + s.slice(1)
}

export default () => {
  let config = [
    {
      input: 'src/index.ts',
      // external: ['vue'],
      output: [
        {
          format: 'cjs',
          file: packageJson.main,
          banner: bannerTxt,
          sourcemap: true,
        },
        {
          format: 'esm',
          file: packageJson.module,
          banner: bannerTxt,
          sourcemap: true,
        },
      ],
      plugins: [
        peerDepsExternal(),
        nodeResolve({
          extensions: ['.vue', '.ts'],
        }),
        typescript({
          tsconfig: 'tsconfig.json',
          tsconfigDefaults,
          tsconfigOverride,
        }),
        vue(vuePluginConfig),
        // babel(babelOptions),
        commonjs(),
        postcss(),
      ],
    },
  ]

  if (process.env.MINIFY === 'true') {
    config = config.filter((c) => !!c.output.file)
    config.forEach((c) => {
      c.output.file = c.output.file.replace(/\.js/g, '.min.js')
      c.plugins.push(
        terser({
          output: {
            comments: '/^!/',
          },
        }),
      )
    })
  }
  return config
}
